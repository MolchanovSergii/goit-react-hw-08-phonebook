{"version":3,"file":"static/js/429.f53abbcb.chunk.js","mappings":"sOAIaA,GAAQC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,2HAQLE,EAAcF,EAAAA,GAAAA,IAAH,mF,wCCLlBG,EAASC,EAAAA,KAAaC,MAAM,CAChCC,KAAMF,EAAAA,KAEHG,IAAI,EAAG,yBACPC,SAAS,wBACZC,MAAOL,EAAAA,KAAaI,WAAWC,QAC/BC,SAAUN,EAAAA,KAEPI,WACAD,IAAI,EAAG,yBACPI,IAAI,GAAI,0BAGPC,EAAgB,CACpBN,KAAM,GACNG,MAAO,GACPC,SAAU,IAyCZ,EAtCyB,WACvB,IAAMG,GAAWC,EAAAA,EAAAA,MAOjB,OACE,SAAC,KAAD,CACEF,cAAeA,EACfG,iBAAkBZ,EAClBa,SATiB,SAACC,EAAQC,GAC5BL,GAASM,EAAAA,EAAAA,IAASF,IAClBC,EAAQE,WACT,EAGC,UAKE,SAAC,KAAD,WACE,UAAClB,EAAD,YACE,mBAAOmB,QAAQ,OAAf,UAAsB,YAEpB,SAAC,KAAD,CAAOC,KAAK,OAAOhB,KAAK,UACxB,SAACP,EAAD,CAAOO,KAAK,OAAOiB,UAAU,YAE/B,mBAAOF,QAAQ,QAAf,UAAuB,SAErB,SAAC,KAAD,CAAOC,KAAK,QAAQhB,KAAK,WACzB,SAACP,EAAD,CAAOO,KAAK,QAAQiB,UAAU,YAEhC,mBAAOF,QAAQ,WAAf,UAA0B,YAExB,SAAC,KAAD,CAAOC,KAAK,WAAWhB,KAAK,cAC5B,SAACP,EAAD,CAAOO,KAAK,WAAWiB,UAAU,YAEnC,mBAAQD,KAAK,SAAb,SAAsB,iBAK/B,C","sources":["pages/RegistrationPage/RegistrationPageStyled.js","pages/RegistrationPage/RegistrationPage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nimport { ErrorMessage } from 'formik';\n\nexport const Error = styled(ErrorMessage)`\n  color: red;\n  font-size: 12px;\n  margin-top: 5px;\n  text-align: end;\n  padding-right: 10px;\n`;\n\nexport const FormWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n`;\n","import React from 'react';\nimport { Formik, Form, Field } from 'formik';\nimport { Error, FormWrapper } from './RegistrationPageStyled';\nimport * as yup from 'yup';\nimport { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/authOperations';\n\nconst schema = yup.object().shape({\n  name: yup\n    .string()\n    .min(2, 'Username is too short')\n    .required('Username is required'),\n  email: yup.string().required().email(),\n  password: yup\n    .string()\n    .required()\n    .min(7, 'Password is too short')\n    .max(16, 'Password is too long'),\n});\n\nconst initialValues = {\n  name: '',\n  email: '',\n  password: '',\n};\n\nconst RegistrationPage = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, actions) => {\n    dispatch(register(values));\n    actions.resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <Form>\n        <FormWrapper>\n          <label htmlFor=\"name\">\n            Username\n            <Field type=\"text\" name=\"name\" />\n            <Error name=\"name\" component=\"div\" />\n          </label>\n          <label htmlFor=\"email\">\n            Email\n            <Field type=\"email\" name=\"email\" />\n            <Error name=\"email\" component=\"div\" />\n          </label>\n          <label htmlFor=\"password\">\n            Password\n            <Field type=\"password\" name=\"password\" />\n            <Error name=\"password\" component=\"div\" />\n          </label>\n          <button type=\"submit\">Log In</button>\n        </FormWrapper>\n      </Form>\n    </Formik>\n  );\n};\n\nexport default RegistrationPage;\n"],"names":["Error","styled","ErrorMessage","FormWrapper","schema","yup","shape","name","min","required","email","password","max","initialValues","dispatch","useDispatch","validationSchema","onSubmit","values","actions","register","resetForm","htmlFor","type","component"],"sourceRoot":""}