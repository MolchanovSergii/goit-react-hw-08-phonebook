{"version":3,"file":"static/js/51.fe179f88.chunk.js","mappings":"+RAEaA,E,QAAaC,GAAAA,IAAH,yC,mBC4BvB,EA3BiB,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAClB,IAAKA,EAAOC,KAAKC,OACf,OAAO,uBAAG,+BAKZ,OACE,8BACGF,EAAOC,KAAKE,KAAI,gBAAGC,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,cAAeC,EAAhC,EAAgCA,UAAWC,EAA3C,EAA2CA,GAA3C,OACf,2BACGH,GACC,SAACN,EAAD,CACEU,IAAG,UARO,mCAQP,OAAqBJ,GACxBK,IAAI,uBAGN,SAAC,MAAD,CAAaC,KAAM,OAErB,wBAAKL,KACL,yBAAG,cAAYC,OAVPC,EADK,KAgBtB,ECID,EAvBa,WACX,IAAQI,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAkCE,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAwBF,EAAAA,EAAAA,UAAS,MAAjC,eAAOG,EAAP,KAAaC,EAAb,KAiBA,OAfAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,2FAChBJ,GAAa,GADG,mBAGQK,EAAAA,EAAAA,IAAoBT,GAH5B,OAGRU,EAHQ,OAKdJ,EAAQI,GACRN,GAAa,GANC,gDAQdO,EAAAA,OAAAA,QAAA,uCAA+C,KAAMC,UARvC,yDAAH,qDAWfJ,GACD,GAAE,CAACR,KAEG,8BAAGG,GAAY,SAACU,EAAA,EAAD,IAAaR,IAAQ,SAAC,EAAD,CAAUhB,OAAQgB,KAC9D,C,+EC5BYS,E,QAAkB1B,GAAAA,IAAH,mN,SCS5B,EARe,WACb,OACE,SAAC0B,EAAD,WACE,SAAC,KAAD,CAAWC,MAAM,UAAUC,OAAQ,IAAKC,MAAO,OAGpD,C,kMCPDC,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAU,mCAET,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,0FACc,qBADd,SAEkBF,EAAAA,EAAAA,IAAA,UADJ,qBACI,mCACmBC,IAHrC,cAECE,EAFD,yBAKEA,EAAShB,MALX,kEAQA,SAAeiB,EAAtB,+CAAO,OAAP,oBAAO,WAA6BtB,GAA7B,gFACCuB,EADD,gBACuBvB,GADvB,SAEkBkB,EAAAA,EAAAA,IAAA,UAClBK,EADkB,mCACmBJ,IAHrC,cAECE,EAFD,yBAKEA,EAAShB,MALX,kEAQA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAAmCT,GAAnC,gFACCuB,EADD,gBACuBvB,EADvB,qBAEkBkB,EAAAA,EAAAA,IAAA,UAClBK,EADkB,mCACmBJ,IAHrC,cAECE,EAFD,yBAKEA,EAAShB,MALX,kEAQA,SAAemB,EAAtB,+CAAO,OAAP,oBAAO,WAAoCxB,GAApC,gFACCuB,EADD,gBACuBvB,EADvB,qBAEkBkB,EAAAA,EAAAA,IAAA,UAClBK,EADkB,mCACmBJ,IAHrC,cAECE,EAFD,yBAKEA,EAAShB,MALX,kEAQA,SAAeoB,EAAtB,+CAAO,OAAP,oBAAO,WAAmCC,GAAnC,qGAEkBR,EAAAA,EAAAA,IAAA,UAFlB,eAEkB,kBACEQ,EADF,8DAC6DP,IAH/E,cAECE,EAFD,yBAKEA,EAAShB,MALX,kE","sources":["components/Cast/CastCardStyled.js","components/Cast/CastCard.jsx","components/Cast/Cast.jsx","components/Loader/LoaderStyled.js","components/Loader/Loader.jsx","services/fetchApi.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ActorPhoto = styled.img`\n  width: 100px;\n`;\n","import { ActorPhoto } from './CastCardStyled';\nimport { BsCardImage } from 'react-icons/bs';\n\nconst CastCard = ({ actors }) => {\n  if (!actors.cast.length) {\n    return <p>Sorry, no figures for cast</p>;\n  }\n\n  const baseImagePath = 'https://image.tmdb.org/t/p/w500';\n\n  return (\n    <>\n      {actors.cast.map(({ profile_path, original_name, character, id }) => (\n        <div key={id}>\n          {profile_path ? (\n            <ActorPhoto\n              src={`${baseImagePath}${profile_path}`}\n              alt=\"Movie Actors Cast\"\n            />\n          ) : (\n            <BsCardImage size={100} />\n          )}\n          <li>{original_name}</li>\n          <p>Character: {character}</p>\n        </div>\n      ))}\n    </>\n  );\n};\n\nexport default CastCard;\n","import { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nimport { fetchApiMovieActors } from 'services/fetchApi';\n\nimport Loader from 'components/Loader/Loader';\nimport CastCard from './CastCard';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [isLoading, setIsLoading] = useState(false);\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsLoading(true);\n      try {\n        const dataApi = await fetchApiMovieActors(movieId);\n\n        setData(dataApi);\n        setIsLoading(false);\n      } catch (error) {\n        Notify.failure(`Sorry, something went wrong. ${error.message}`);\n      }\n    };\n    fetchData();\n  }, [movieId]);\n\n  return <>{isLoading ? <Loader /> : data && <CastCard actors={data} />}</>;\n};\n\nexport default Cast;\n","import styled from 'styled-components';\n\nexport const LoaderContainer = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  /* width: 100vw; */\n  /* height: 100vh; */\n`;\n","import { ThreeDots } from 'react-loader-spinner';\nimport { LoaderContainer } from './LoaderStyled';\n\nconst Loader = () => {\n  return (\n    <LoaderContainer>\n      <ThreeDots color=\"#3f51b5\" height={200} width={200} />\n    </LoaderContainer>\n  );\n};\n\nexport default Loader;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'f6352dcc8bb6548bb49d551f5d46c756';\n\nexport async function fetchApi() {\n  const END_POINTS = 'trending/movie/day';\n  const response = await axios.get(\n    `${END_POINTS}?language=en-US&api_key=${API_KEY}`\n  );\n  return response.data;\n}\n\nexport async function fetchApiMovie(movieId) {\n  const END_POINTS = `movie/${movieId}`;\n  const response = await axios.get(\n    `${END_POINTS}?language=en-US&api_key=${API_KEY}`\n  );\n  return response.data;\n}\n\nexport async function fetchApiMovieActors(movieId) {\n  const END_POINTS = `movie/${movieId}/credits`;\n  const response = await axios.get(\n    `${END_POINTS}?language=en-US&api_key=${API_KEY}`\n  );\n  return response.data;\n}\n\nexport async function fetchApiMovieReviews(movieId) {\n  const END_POINTS = `movie/${movieId}/reviews`;\n  const response = await axios.get(\n    `${END_POINTS}?language=en-US&api_key=${API_KEY}`\n  );\n  return response.data;\n}\n\nexport async function fetchApiMovieSearch(query) {\n  const END_POINTS = `search/movie`;\n  const response = await axios.get(\n    `${END_POINTS}?query=${query}&include_adult=false&language=en-US&page=1&api_key=${API_KEY}`\n  );\n  return response.data;\n}\n"],"names":["ActorPhoto","styled","actors","cast","length","map","profile_path","original_name","character","id","src","alt","size","movieId","useParams","useState","isLoading","setIsLoading","data","setData","useEffect","fetchData","fetchApiMovieActors","dataApi","Notify","message","Loader","LoaderContainer","color","height","width","axios","API_KEY","fetchApi","response","fetchApiMovie","END_POINTS","fetchApiMovieReviews","fetchApiMovieSearch","query"],"sourceRoot":""}