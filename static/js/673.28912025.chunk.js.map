{"version":3,"file":"static/js/673.28912025.chunk.js","mappings":"0LACA,I,yBCCaA,EAAaC,EAAAA,GAAAA,KAAH,gGAMVC,EAAcD,EAAAA,GAAAA,MAAH,yLAYXE,EAAeF,EAAAA,GAAAA,OAAH,gO,UCoDzB,EAjEqB,WAKnB,IAAMG,EFOK,WAGX,IAH0B,IAAdC,EAAc,uDAAP,GACfC,EAAK,GACLC,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWL,IAC3CA,KAAQ,CACb,IAAIM,EAAqB,GAAdJ,EAAMF,GAEfC,GADEK,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAET,CACD,OAAOL,CACR,CEvBkBQ,GA2BjB,OACE,UAACd,EAAD,CAAYe,SA1BW,SAAAC,GACvBA,EAAMC,iBACNC,QAAQC,IAAIH,EAAMI,OAAOC,KAAKC,OAC9BJ,QAAQC,IAAIH,EAAMI,OAAOG,OAAOD,MAejC,EAQC,WACE,mBAAOE,QAASpB,EAAhB,UAA0B,QAExB,SAACF,EAAD,CACEuB,KAAK,OACLJ,KAAK,OAGLf,GAAIF,EACJsB,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,QAGZ,mBAAOJ,QAASpB,EAAhB,UAA0B,UAExB,SAACF,EAAD,CACEuB,KAAK,MACLJ,KAAK,SAGLf,GAAIF,EACJsB,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,QAGZ,SAACzB,EAAD,CAAcsB,KAAK,SAAnB,SAA4B,kBAGjC,EC7CD,EAnBe,WAUb,OACE,6BAAO,yBAGL,SAACvB,EAAD,CAAauB,KAAK,WAGvB,E,qECpBYI,GAAgBC,EAAAA,EAAAA,IAC3B,oBAD2C,mCAE3C,WAAOC,EAAGC,GAAV,kGAE2BC,EAAAA,EAAAA,IAAU,aAFrC,uBAEYC,EAFZ,EAEYA,KAFZ,kBAGWA,GAHX,yDAKWF,EAASG,gBAAgB,KAAMC,UAL1C,yDAF2C,yDCiB7C,IDL0BN,EAAAA,EAAAA,IACxB,sBADwC,mCAExC,aAAyBE,GAAzB,oFAASX,EAAT,EAASA,KAAME,EAAf,EAAeA,OAAf,kBAE2BU,EAAAA,EAAAA,KAAW,YAAa,CAAEZ,KAAAA,EAAME,OAAAA,IAF3D,uBAEYW,EAFZ,EAEYA,KAFZ,kBAGWA,GAHX,yDAKWF,EAASG,gBAAgB,KAAMC,UAL1C,yDAFwC,yDCTrB,WACnB,IAAMC,GAAWC,EAAAA,EAAAA,MAKjB,OAHAC,EAAAA,EAAAA,YAAU,WACRF,EAASR,IACV,GAAE,CAACQ,KAEF,iCACE,SAACG,EAAD,KACA,SAAC,EAAD,MAGL,E","sources":["../node_modules/nanoid/index.browser.js","components/ContactForm/ContactFormStyled.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","redux/contacts/contactsOperations.js","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import styled from 'styled-components';\n\nexport const StyledForm = styled.form`\n  border: 1px solid black;\n  padding-left: 5px;\n  padding-top: 10px;\n`;\n\nexport const StyledInput = styled.input`\n  display: block;\n  margin-top: 5px;\n  margin-bottom: 20px;\n  border: 1px solid grey;\n  outline: none;\n  :hover,\n  :focus {\n    border-color: blue;\n  }\n`;\n\nexport const StyledButton = styled.button`\n  background-color: #fff;\n  border: 1px solid blueviolet;\n  border-radius: 3px;\n  margin-bottom: 20px;\n  transition: background-color 1s;\n  :hover,\n  :focus {\n    background-color: blue;\n  }\n`;\n","// import React, { useState } from 'react';\nimport { nanoid } from 'nanoid';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { addContact } from 'redux/contacts/operations';\n\nimport { StyledForm, StyledInput, StyledButton } from './ContactFormStyled';\n\nconst ContactForms = () => {\n  // const contactsList = useSelector(state => state.contacts.items);\n\n  // const dispatch = useDispatch();\n\n  const uniqueId = nanoid();\n\n  const handleSubmitForm = event => {\n    event.preventDefault();\n    console.log(event.target.name.value);\n    console.log(event.target.number.value);\n\n    // const isDuplicateName = contactsList.some(contacts =>\n    //   contacts.name.toLowerCase().includes(name.toLowerCase())\n    // );\n\n    // if (isDuplicateName) {\n    //   alert(`${name} is alredy to contacts`);\n    //   return;\n    // }\n\n    // const contact = { name, number };\n    // form.reset();\n\n    // dispatch(addContact(contact));\n  };\n\n  // const reset = () => {\n  //   setName('');\n  //   setNumber('');\n  // };\n\n  return (\n    <StyledForm onSubmit={handleSubmitForm}>\n      <label htmlFor={uniqueId}>\n        Name\n        <StyledInput\n          type=\"text\"\n          name=\"name\"\n          // value={name}\n          // onChange={handleChange}\n          id={uniqueId}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n      <label htmlFor={uniqueId}>\n        Number\n        <StyledInput\n          type=\"tel\"\n          name=\"number\"\n          // value={number}\n          // onChange={handleChange}\n          id={uniqueId}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </label>\n      <StyledButton type=\"submit\">Add contact</StyledButton>\n    </StyledForm>\n  );\n};\n\nexport default ContactForms;\n","// import React, { useState } from 'react';\n// import { useDispatch } from 'react-redux';\n// import { renderFilter } from 'redux/filter/filterSlice';\n\nimport { StyledInput } from '../ContactForm/ContactFormStyled';\n\nconst Filter = () => {\n  // const [filter, setFilter] = useState('');\n  // const dispatch = useDispatch();\n\n  // const changeFilterData = event => {\n  //   const { value } = event.currentTarget;\n  //   setFilter(value);\n  //   dispatch(renderFilter(value));\n  // };\n\n  return (\n    <label>\n      Find contacts by name\n      {/* <StyledInput type=\"text\" value={filter} onChange={changeFilterData} /> */}\n      <StyledInput type=\"text\" />\n    </label>\n  );\n};\n\nexport default Filter;\n","import axios from 'axios';\nimport { createAsyncThunk } from '@reduxjs/toolkit';\n\nexport const fetchContacts = createAsyncThunk(\n  'contacts/fetchAll',\n  async (_, thunkAPI) => {\n    try {\n      const { data } = await axios.get('/contacts');\n      return data;\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error.message);\n    }\n  }\n);\n\nexport const addContact = createAsyncThunk(\n  'contacts/addContact',\n  async ({ name, number }, thunkAPI) => {\n    try {\n      const { data } = await axios.post('/contacts', { name, number });\n      return data;\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error.message);\n    }\n  }\n);\n","import ContactForms from 'components/ContactForm/ContactForm';\nimport Filter from 'components/Filter/Filter';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/contactsOperations';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  return (\n    <>\n      <ContactForms />\n      <Filter />\n    </>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["StyledForm","styled","StyledInput","StyledButton","uniqueId","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","nanoid","onSubmit","event","preventDefault","console","log","target","name","value","number","htmlFor","type","pattern","title","required","fetchContacts","createAsyncThunk","_","thunkAPI","axios","data","rejectWithValue","message","dispatch","useDispatch","useEffect","ContactForm"],"sourceRoot":""}