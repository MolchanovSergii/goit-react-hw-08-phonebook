{"version":3,"file":"static/js/134.eaa54d57.chunk.js","mappings":"qMAEaA,E,QAAkBC,GAAAA,IAAH,mN,SCS5B,EARe,WACb,OACE,SAACD,EAAD,WACE,SAAC,KAAD,CAAWE,MAAM,UAAUC,OAAQ,IAAKC,MAAO,OAGpD,C,wDCUD,IAjBqB,SAAC,GAAc,IAC1BC,EADyB,EAAXC,KACdD,QACFE,GAAWC,EAAAA,EAAAA,MAEjB,OACE,wBACGH,EAAQI,KAAI,SAAAC,GAAM,OACjB,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAOE,IAAMC,MAAO,CAAEC,KAAMP,GAAjD,SACGG,EAAOK,SAFHL,EAAOE,GADC,KASxB,C,4ICoDD,UA5De,WAAO,IAAD,EACnB,GAAkCI,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAwBF,EAAAA,EAAAA,UAAS,MAAjC,eAAOV,EAAP,KAAaa,EAAb,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KAGMC,EAAK,UAAGF,EAAaG,IAAI,gBAApB,QAAgC,GA6B3C,OAfAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,2FAChBR,GAAa,GADG,mBAGQS,EAAAA,EAAAA,IAAoBJ,GAH5B,OAGRK,EAHQ,OAKdT,EAAQS,GACRV,GAAa,GANC,gDAQdW,EAAAA,OAAAA,QAAA,uCAA+C,KAAMC,UARvC,yDAAH,qDAWfJ,GACD,GAAE,CAACH,KAGF,6BACE,wBAAI,YACJ,kBAAMQ,SA9BgB,SAAAC,GACxBA,EAAMC,iBACN,IAAMC,EAAOF,EAAMG,cACnBb,EAAgB,CAAEC,MAAOW,EAAKE,SAASb,MAAMc,OAC9C,EA0BG,WACE,kBACEC,KAAK,QACLC,KAAK,OACLC,aAAa,MACbC,WAAS,KAIX,mBAAQF,KAAK,SAAb,SAAsB,cAEvBtB,GACC,SAAC,IAAD,IACY,OAAVM,GAAkBjB,GAAQA,EAAKD,QAAQqC,QACzC,SAAC,IAAD,CAAcpC,KAAMA,KAEpB,uBAAG,sBAIV,C,kMCjEDqC,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAU,mCAET,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,0FACc,qBADd,SAEkBF,EAAAA,EAAAA,IAAA,UADJ,qBACI,mCACmBC,IAHrC,cAECE,EAFD,yBAKEA,EAASxC,MALX,kEAQA,SAAeyC,EAAtB,+CAAO,OAAP,oBAAO,WAA6BC,GAA7B,gFACCC,EADD,gBACuBD,GADvB,SAEkBL,EAAAA,EAAAA,IAAA,UAClBM,EADkB,mCACmBL,IAHrC,cAECE,EAFD,yBAKEA,EAASxC,MALX,kEAQA,SAAe4C,EAAtB,+CAAO,OAAP,oBAAO,WAAmCF,GAAnC,gFACCC,EADD,gBACuBD,EADvB,qBAEkBL,EAAAA,EAAAA,IAAA,UAClBM,EADkB,mCACmBL,IAHrC,cAECE,EAFD,yBAKEA,EAASxC,MALX,kEAQA,SAAe6C,EAAtB,+CAAO,OAAP,oBAAO,WAAoCH,GAApC,gFACCC,EADD,gBACuBD,EADvB,qBAEkBL,EAAAA,EAAAA,IAAA,UAClBM,EADkB,mCACmBL,IAHrC,cAECE,EAFD,yBAKEA,EAASxC,MALX,kEAQA,SAAeqB,EAAtB,+CAAO,OAAP,oBAAO,WAAmCJ,GAAnC,qGAEkBoB,EAAAA,EAAAA,IAAA,UAFlB,eAEkB,kBACEpB,EADF,8DAC6DqB,IAH/E,cAECE,EAFD,yBAKEA,EAASxC,MALX,kE","sources":["components/Loader/LoaderStyled.js","components/Loader/Loader.jsx","components/TrendingList/TrendingList.jsx","pages/Movies.jsx","services/fetchApi.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const LoaderContainer = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  /* width: 100vw; */\n  /* height: 100vh; */\n`;\n","import { ThreeDots } from 'react-loader-spinner';\nimport { LoaderContainer } from './LoaderStyled';\n\nconst Loader = () => {\n  return (\n    <LoaderContainer>\n      <ThreeDots color=\"#3f51b5\" height={200} width={200} />\n    </LoaderContainer>\n  );\n};\n\nexport default Loader;\n","import { Link, useLocation } from 'react-router-dom';\n\nconst TrendingList = ({ data }) => {\n  const { results } = data;\n  const location = useLocation();\n\n  return (\n    <ul>\n      {results.map(result => (\n        <li key={result.id}>\n          <Link to={`/movies/${result.id}`} state={{ from: location }}>\n            {result.title}\n          </Link>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default TrendingList;\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nimport { fetchApiMovieSearch } from 'services/fetchApi';\n\nimport Loader from 'components/Loader/Loader';\nimport TrendingList from 'components/TrendingList/TrendingList';\n\nconst Movies = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [data, setData] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  // делает проверку, если там null, то ставит ''\n  const query = searchParams.get('query') ?? '';\n\n  const handlerSubmitForm = event => {\n    event.preventDefault();\n    const form = event.currentTarget;\n    setSearchParams({ query: form.elements.query.value });\n  };\n\n  // const handlerChangeQuery = event => {\n  //   const value = event.target.value;\n  //   const currentValue = value !== '' ? value : [];\n  //   setSearchParams({ query: currentValue });\n  // };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsLoading(true);\n      try {\n        const dataApi = await fetchApiMovieSearch(query);\n\n        setData(dataApi);\n        setIsLoading(false);\n      } catch (error) {\n        Notify.failure(`Sorry, something went wrong. ${error.message}`);\n      }\n    };\n    fetchData();\n  }, [query]);\n\n  return (\n    <main>\n      <h1>Movies</h1>\n      <form onSubmit={handlerSubmitForm}>\n        <input\n          name=\"query\"\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          // value={query}\n          // onChange={handlerChangeQuery}\n        />\n        <button type=\"submit\">Search</button>\n      </form>\n      {isLoading ? (\n        <Loader />\n      ) : query !== null && data && data.results.length ? (\n        <TrendingList data={data} />\n      ) : (\n        <p>No movies found</p>\n      )}\n    </main>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'f6352dcc8bb6548bb49d551f5d46c756';\n\nexport async function fetchApi() {\n  const END_POINTS = 'trending/movie/day';\n  const response = await axios.get(\n    `${END_POINTS}?language=en-US&api_key=${API_KEY}`\n  );\n  return response.data;\n}\n\nexport async function fetchApiMovie(movieId) {\n  const END_POINTS = `movie/${movieId}`;\n  const response = await axios.get(\n    `${END_POINTS}?language=en-US&api_key=${API_KEY}`\n  );\n  return response.data;\n}\n\nexport async function fetchApiMovieActors(movieId) {\n  const END_POINTS = `movie/${movieId}/credits`;\n  const response = await axios.get(\n    `${END_POINTS}?language=en-US&api_key=${API_KEY}`\n  );\n  return response.data;\n}\n\nexport async function fetchApiMovieReviews(movieId) {\n  const END_POINTS = `movie/${movieId}/reviews`;\n  const response = await axios.get(\n    `${END_POINTS}?language=en-US&api_key=${API_KEY}`\n  );\n  return response.data;\n}\n\nexport async function fetchApiMovieSearch(query) {\n  const END_POINTS = `search/movie`;\n  const response = await axios.get(\n    `${END_POINTS}?query=${query}&include_adult=false&language=en-US&page=1&api_key=${API_KEY}`\n  );\n  return response.data;\n}\n"],"names":["LoaderContainer","styled","color","height","width","results","data","location","useLocation","map","result","to","id","state","from","title","useState","isLoading","setIsLoading","setData","useSearchParams","searchParams","setSearchParams","query","get","useEffect","fetchData","fetchApiMovieSearch","dataApi","Notify","message","onSubmit","event","preventDefault","form","currentTarget","elements","value","name","type","autoComplete","autoFocus","length","axios","API_KEY","fetchApi","response","fetchApiMovie","movieId","END_POINTS","fetchApiMovieActors","fetchApiMovieReviews"],"sourceRoot":""}